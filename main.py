from pathlib import Path
import signal
import socket
import subprocess
import sys
import time

import click

from core.job_manager import get_job_manager
from database.database import init_db as db_init_db
from logger import logger
from parsers.notion_data import sync_notion_data
from parsers.ya_maps_reviews_parser import fetch_reviews_for_all_restaurants

project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


def find_free_port(start_port: int = 8501, max_attempts: int = 10) -> int | None:
    """–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –Ω–∞—á–∏–Ω–∞—è —Å start_port"""
    for port in range(start_port, start_port + max_attempts):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(("", port))
                return port
        except OSError:
            continue
    return None


def run_ui() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit"""
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

    try:
        port = find_free_port()
        if port is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è Streamlit")
            return

        logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

        subprocess.run(
            [
                sys.executable,
                "-m",
                "streamlit",
                "run",
                "core/app.py",
                f"--server.port={port}",
                "--server.address=0.0.0.0",
                "--server.headless=true",
                "--browser.gatherUsageStats=false",
            ],
            check=True,
        )
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Streamlit: {e}")


def run_notion_sync() -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Notion"""
    logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion...")

    try:
        result = sync_notion_data()
        if result:
            logger.success("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def run_init_db() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        db_init_db(auto_create_db=True)
        logger.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


def run_reviews_parsing(limit_restaurants: int | None = 50) -> None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""
    try:
        result = fetch_reviews_for_all_restaurants(limit_restaurants=limit_restaurants)

        if result.get("success"):
            logger.success("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            logger.error(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def run_nlp_processing() -> None:
    """NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        manager = get_job_manager()
        result = manager.run_job_now("nlp_processing")

        if result.get("success"):
            logger.success("NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.error(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def run_failed_restaurants_check(limit_restaurants: int | None = 20) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏"""
    try:
        from parsers.ya_maps_reviews_parser import fetch_reviews_for_failed_restaurants

        result = fetch_reviews_for_failed_restaurants(limit_restaurants=limit_restaurants)

        if result.get("success"):
            logger.success("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.error(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def run_initial_full_cycle() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –í–°–ï —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")

    try:
        # –≠—Ç–∞–ø 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion
        logger.info("\n" + "=" * 60)
        logger.info("–≠–¢–ê–ü 1/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion")
        logger.info("=" * 60)
        run_notion_sync()

        # –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –í–°–ï–• —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        logger.info("\n" + "=" * 60)
        logger.info("–≠–¢–ê–ü 2/4: –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        logger.info("=" * 60)
        run_reviews_parsing(limit_restaurants=None)  # –ë–µ–∑ –ª–∏–º–∏—Ç–∞

        # –≠—Ç–∞–ø 3: NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞
        logger.info("\n" + "=" * 60)
        logger.info("–≠–¢–ê–ü 3/4: NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤")
        logger.info("=" * 60)
        run_nlp_processing()

        # –≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á
        logger.info("\n" + "=" * 60)
        logger.info("–≠–¢–ê–ü 4/4: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á")
        logger.info("=" * 60)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:")
        logger.info("   - Notion sync: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00")
        logger.info("   - Reviews parsing: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00")
        logger.info("   - NLP processing: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        run_scheduler()

    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")


def run_scheduler() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")

    try:
        manager = get_job_manager()
        manager.start()
        logger.success("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        logger.info("–î–∂–æ–±—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:")
        logger.info("   - Notion sync: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00")
        logger.info("   - Reviews parsing: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00")
        logger.info("   - NLP processing: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00")

        def signal_handler(_signum, _frame):
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            manager.stop()
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

        while True:
            time.sleep(1)

    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        manager.stop()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        if "manager" in locals():
            manager.stop()


def run_full() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Scheduler + Notion -> UI -> Reviews (–≤ —Ñ–æ–Ω–µ)"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        scheduler_process = subprocess.Popen(
            [sys.executable, __file__, "--scheduler"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")

        logger.info("–≠—Ç–∞–ø 1/3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion")
        run_notion_sync()

        logger.info("–≠—Ç–∞–ø 2/3: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤...")
        subprocess.Popen(
            [sys.executable, __file__, "--reviews"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")

        logger.info("–≠—Ç–∞–ø 3/3: –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        run_ui()

    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        if "scheduler_process" in locals():
            scheduler_process.terminate()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        if "scheduler_process" in locals():
            scheduler_process.terminate()


@click.group()
@click.version_option(version="1.0.0")
@click.pass_context
def cli(ctx):
    """RestoMaps Analytics - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    ctx.ensure_object(dict)
    logger.info("RestoMaps Analytics")


@cli.command()
@click.option("--limit", "-l", type=int, help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
def reviews(limit):
    """–ü–∞—Ä—Å–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""
    click.echo(click.style("üçΩÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç", fg="blue", bold=True))
    run_reviews_parsing(limit_restaurants=limit)


@cli.command()
def notion():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Notion"""
    click.echo(click.style("üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion", fg="green", bold=True))
    run_notion_sync()


@cli.command()
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    click.echo(click.style("üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", fg="yellow", bold=True))
    run_init_db()


@cli.command()
@click.option("--limit", "-l", type=int, default=20, help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
def check_failed(limit):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏"""
    click.echo(click.style("üîß –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏", fg="red", bold=True))
    run_failed_restaurants_check(limit_restaurants=limit)


@cli.command()
def scheduler():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    click.echo(click.style("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á", fg="cyan", bold=True))
    run_scheduler()


@cli.command()
def ui():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    click.echo(click.style("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", fg="magenta", bold=True))
    run_ui()


@cli.command()
def full():
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Scheduler + Notion + Reviews + UI"""
    click.echo(click.style("üöÄ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Scheduler + Notion + Reviews + UI", fg="bright_green", bold=True))
    run_full()


@cli.command()
def initial():
    """–ü–æ–ª–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–æ–Ω –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ + –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    click.echo(click.style("üéØ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–æ–Ω –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ + –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", fg="bright_yellow", bold=True))
    run_initial_full_cycle()


if __name__ == "__main__":
    cli()
